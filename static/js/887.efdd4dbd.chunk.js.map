{"version":3,"file":"static/js/887.efdd4dbd.chunk.js","mappings":"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","sources":["pages/discriptionpage/slidercards.jsx","pages/discriptionpage/movieprops.jsx","pages/discriptionpage/MovieDetails.jsx","pages/discriptionpage/MovieApi.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Carousel, Card } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction CardsCarousel({ recommendations }) {\r\n  const [cardsPerSlide, setCardsPerSlide] = useState(getCardsPerSlide());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setCardsPerSlide(getCardsPerSlide());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  function getCardsPerSlide() {\r\n    if (window.innerWidth >= 1200) {\r\n      return 7;\r\n    } else if (window.innerWidth >= 992) {\r\n      return 5;\r\n    } else if (window.innerWidth >= 768) {\r\n      return 3;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  const groupedRecommendations = [];\r\n  for (let i = 0; i < recommendations.length; i += cardsPerSlide) {\r\n    groupedRecommendations.push(recommendations.slice(i, i + cardsPerSlide));\r\n  }\r\n\r\n  //color raiting function\r\n  const getBorderColor = (rating) => {\r\n    if (rating >= 80) return \"#00ff00\";\r\n    if (rating >= 60) return \"yellow\";\r\n    if (rating >= 50) return \"orange\";\r\n    return \"red\";\r\n  };\r\n\r\n  return (\r\n    <Carousel>\r\n      {groupedRecommendations.map((group, index) => (\r\n        <Carousel.Item key={index}>\r\n          <div className=\"d-flex justify-content-around flex-wrap\">\r\n            {group.map((movie) => {\r\n              // Calculate the rating and border color for each movie\r\n              const rating = Math.round(movie.vote_average * 10);\r\n              const borderColor = getBorderColor(rating);\r\n              const currentTheme = document.body.classList.contains(\"dark-mode\") ? \"darkmode\" : \"lightmode\";\r\n\r\n              return (\r\n                <Card\r\n                  key={movie.id}\r\n                  border=\"white\"\r\n                  style={cardStyle[currentTheme]}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      position: \"absolute\",\r\n                      bottom: \"90px\",\r\n                      border: `5px solid ${borderColor}`,\r\n                      left: \"20px\",\r\n                      width: \"40px\",\r\n                      height: \"40px\",\r\n                      borderRadius: \"50%\",\r\n                      backgroundColor: \"#1e2533\",\r\n                      color: \"#87ceeb\",\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  >\r\n                    <span>{rating}</span>\r\n                  </div>\r\n                  <Card.Img\r\n                    variant=\"top\"\r\n                    style={{\r\n                      borderRadius: \"15px\",\r\n                      border: \"1px solid black\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n                    alt={movie.title}\r\n                  />\r\n                  <Card.Body>\r\n                    <Link\r\n                      style={{ textDecoration: \"none\" , color: \"black\" }}\r\n                      to={`/movie/${movie.id}`}\r\n                    >\r\n                      <Card.Title\r\n                        style={{\r\n                          fontSize: \"16px\",\r\n                          fontWeight: \"bold\",\r\n                          cursor: \"pointer\",\r\n                          marginBottom: \"30px\",\r\n                          marginTop: \"20px\",\r\n                          height: \"10px\",\r\n                        }}\r\n                      >\r\n                        {movie.title}\r\n                      </Card.Title>{\" \"}\r\n                    </Link>\r\n\r\n                    <Card.Text style={{ color: \"gray\" }}>\r\n                      {movie.release_date}\r\n                    </Card.Text>\r\n                  </Card.Body>\r\n                </Card>\r\n              );\r\n            })}\r\n          </div>\r\n        </Carousel.Item>\r\n      ))}\r\n    </Carousel>\r\n  );\r\n\r\n}\r\nconst cardStyle = {\r\n  lightmode: {\r\n  width: \"16rem\",\r\n  margin: \"10px auto\",\r\n  position: \"relative\",\r\n  backgroundColor: \"white\",\r\n  color: \"black\",\r\n  },\r\n  darkmode: {\r\n    width: \"16rem\",\r\n    margin: \"10px auto\",\r\n    position: \"relative\",\r\n    backgroundColor: \"#333\",\r\n    color: \"white\",\r\n  }\r\n}\r\nexport default CardsCarousel;\r\n","// MovieProps.js\r\nimport React from \"react\";\r\nimport StarRatings from \"react-star-ratings\";\r\nimport { FaHeart } from \"react-icons/fa\";\r\nimport CardsCarousel from \"./slidercards\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n\r\nconst MovieProps = ({ movie, recommendations, isFavorite, onFavoriteClick, navigateToHomePage }) => {\r\n  const primaryCompany = movie?.production_companies?.[0] || null;\r\n\r\n  return (\r\n    <div className=\"mx-5 mt-5\">\r\n      <div className=\"row\">\r\n        {/* Movie Poster */}\r\n        <div className=\"col-md-4\" style={{ width: \"350px\" }}>\r\n          <img\r\n            style={{ borderRadius: \"15px\", border: \"3px solid black\" }}\r\n            src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n            alt={movie.title}\r\n            className=\"img-fluid\"\r\n          />\r\n        </div>\r\n\r\n        {/* Movie Details */}\r\n        <div className=\"col-md-8 mx-4\">\r\n          <h1>{movie.title}</h1>\r\n          <p style={{ color: \"gray\" }}>{movie.release_date}</p>\r\n          <div className=\"mb-3\">\r\n            <FaHeart\r\n              style={{\r\n                color: isFavorite ? \"#ffeb3b\" : \"gray\",\r\n                fontSize: \"30px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={onFavoriteClick}\r\n            />\r\n          </div>\r\n          <p className=\"mb-5\">\r\n            <StarRatings\r\n              rating={movie.vote_average / 2} // Assuming the API rating is out of 10 and stars are out of 5\r\n              starRatedColor=\"#FFE353\"\r\n              starEmptyColor=\"gray\"\r\n              starDimension=\"30px\"\r\n              starSpacing=\"2px\"\r\n              numberOfStars={5}\r\n              name=\"rating\"\r\n            />\r\n          </p>\r\n\r\n          <p className=\"mb-3\">{movie.overview}</p>\r\n          <p className=\"mb-3\">\r\n            <strong>Run Time: </strong>\r\n            <span\r\n              style={{\r\n                marginLeft: \"15px\",\r\n                backgroundColor: \"#FFE353\",\r\n                padding: \"5px 10px\",\r\n                borderRadius: \"15px\",\r\n                fontSize: \"14px\",\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              {movie.runtime} Min\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <strong>Languages:</strong>\r\n            {movie.spoken_languages?.map((language) => (\r\n              <span\r\n                key={language.iso_639_1}\r\n                style={{\r\n                  marginLeft: \"15px\",\r\n                  backgroundColor: \"#FFE353\",\r\n                  padding: \"5px 10px\",\r\n                  borderRadius: \"15px\",\r\n                  fontSize: \"14px\",\r\n                  color: \"black\",\r\n                }}\r\n              >\r\n                {language.name}\r\n              </span>\r\n            ))}\r\n          </p>\r\n          <p>\r\n            <strong>Genres:</strong>\r\n            {movie.genres?.map((genre) => (\r\n              <span\r\n                key={genre.id}\r\n                style={{\r\n                  marginRight: \"10px\",\r\n                  marginLeft: \"10px\",\r\n                  backgroundColor: \"#FFE353\",\r\n                  padding: \"5px 10px\",\r\n                  borderRadius: \"25px\",\r\n                  cursor: \"pointer\",\r\n                  color: \"black\",\r\n                }}\r\n              >\r\n                {genre.name}\r\n              </span>\r\n            ))}\r\n          </p>\r\n          <div className=\"d-flex\">\r\n            {primaryCompany && (\r\n              <div className=\"d-flex align-items-center\">\r\n                {primaryCompany.logo_path ? (\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/w500${primaryCompany.logo_path}`}\r\n                    alt={primaryCompany.name}\r\n                    style={{ width: \"150px\", borderRadius: \"3px\" }}\r\n                  />\r\n                ) : (\r\n                  <div\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"60px\",\r\n                      backgroundColor: \"gray\",\r\n                      borderRadius: \"10px\",\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <br />\r\n          <button\r\n            className=\"btn btn-outline-warning\"\r\n            onClick={navigateToHomePage}\r\n          >\r\n            Back to Movies\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <h1>Recommendations</h1>\r\n      {recommendations?.length > 0 ? (\r\n        <CardsCarousel recommendations={recommendations} />\r\n      ) : (\r\n        <p>No recommendations available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieProps;\r\n","// MovieDetails.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MovieProps from \"./movieprops.jsx\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addMovieToList, removeMovieFromList } from \"../../Store/Slices/FavoritesSlice.js\";\r\n\r\nconst MovieDetails = ({ movie, recommendations }) => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const isFavorite = useSelector((state) =>\r\n    state.favList.favList.some((favMovie) => favMovie?.id === movie?.id)\r\n  );\r\n\r\n  const [isFavoriteLocal, setIsFavoriteLocal] = useState(isFavorite);\r\n\r\n  useEffect(() => {\r\n    setIsFavoriteLocal(isFavorite);\r\n  }, [isFavorite]);\r\n\r\n  const handleFavoriteClick = () => {\r\n    setIsFavoriteLocal((prev) => {\r\n      const newFavoriteStatus = !prev;\r\n      if (newFavoriteStatus) {\r\n        dispatch(addMovieToList(movie));\r\n      } else {\r\n        dispatch(removeMovieFromList(movie.id));\r\n      }\r\n      return newFavoriteStatus;\r\n    });\r\n  };\r\n\r\n  const navigateToHomePage = () => navigate(\"/\");\r\n\r\n  if (!movie) {\r\n    return <p>Error Loading Data...</p>;\r\n  }\r\n\r\n  return (\r\n    <MovieProps\r\n      movie={movie}\r\n      recommendations={recommendations}\r\n      isFavorite={isFavoriteLocal}\r\n      onFavoriteClick={handleFavoriteClick}\r\n      navigateToHomePage={navigateToHomePage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport MovieDetails from './MovieDetails';\r\n\r\nconst MovieDescription = () => {\r\n  const { id } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMovieDetails = async () => {\r\n      try {\r\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}`, {\r\n          params: {\r\n            api_key: '26c8bc27569c6c650c8f4a2562784179',\r\n            language: 'en-US'\r\n          }\r\n        });\r\n        setMovie(response.data);\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    const fetchRecommendations = async () => {\r\n      try {\r\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}/recommendations`, {\r\n          params: {\r\n            api_key: '26c8bc27569c6c650c8f4a2562784179',\r\n            language: 'en-US'\r\n          }\r\n        });\r\n        setRecommendations(response.data.results);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n\r\n    fetchMovieDetails();\r\n    fetchRecommendations();\r\n  }, [id]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error.message}</div>;\r\n  if (!movie) return <div>Movie not found!</div>;\r\n\r\n  return <MovieDetails movie={movie} recommendations={recommendations} />;\r\n};\r\n\r\nexport default MovieDescription;\r\n"],"names":["cardStyle","lightmode","width","margin","position","backgroundColor","color","darkmode","_ref","recommendations","cardsPerSlide","setCardsPerSlide","useState","getCardsPerSlide","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","groupedRecommendations","i","length","push","slice","_jsx","Carousel","children","map","group","index","Item","className","movie","rating","Math","round","vote_average","borderColor","getBorderColor","currentTheme","document","body","classList","contains","_jsxs","Card","border","style","bottom","left","height","borderRadius","display","alignItems","justifyContent","fontWeight","fontSize","Img","variant","cursor","src","poster_path","alt","title","Body","Link","textDecoration","to","id","Title","marginBottom","marginTop","Text","release_date","_movie$production_com","_movie$spoken_languag","_movie$genres","isFavorite","onFavoriteClick","navigateToHomePage","primaryCompany","production_companies","FaHeart","onClick","StarRatings","starRatedColor","starEmptyColor","starDimension","starSpacing","numberOfStars","name","overview","marginLeft","padding","runtime","spoken_languages","language","iso_639_1","genres","genre","marginRight","logo_path","CardsCarousel","dispatch","useDispatch","navigate","useNavigate","useSelector","state","favList","some","favMovie","isFavoriteLocal","setIsFavoriteLocal","MovieProps","handleFavoriteClick","prev","newFavoriteStatus","addMovieToList","removeMovieFromList","MovieDescription","useParams","setMovie","setRecommendations","loading","setLoading","error","setError","async","response","axios","get","params","api_key","data","fetchMovieDetails","results","fetchRecommendations","message","MovieDetails"],"sourceRoot":""}